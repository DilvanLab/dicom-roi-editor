{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name re-frame.core, :imports nil, :requires {re-frame.interop re-frame.interop, subs re-frame.subs, cofx re-frame.cofx, re-frame.interceptor re-frame.interceptor, fx re-frame.fx, re-frame.events re-frame.events, loggers re-frame.loggers, re-frame.fx re-frame.fx, re-frame.registrar re-frame.registrar, interceptor re-frame.interceptor, router re-frame.router, db re-frame.db, registrar re-frame.registrar, re-frame.router re-frame.router, events re-frame.events, re-frame.std-interceptors re-frame.std-interceptors, re-frame.loggers re-frame.loggers, re-frame.subs re-frame.subs, interop re-frame.interop, std-interceptors re-frame.std-interceptors, re-frame.cofx re-frame.cofx, re-frame.db re-frame.db}, :uses {ctx-handler->interceptor re-frame.std-interceptors, fx-handler->interceptor re-frame.std-interceptors, db-handler->interceptor re-frame.std-interceptors}, :defs {console {:name re-frame.core/console, :file "resources/public/js/re_frame/core.cljc", :line 109, :column 1, :end-line 109, :end-column 13, :meta {:file "/Users/dilvan/OneDrive/IdeaProjects/dicom-roi-editor/resources/public/js/re_frame/core.cljc", :line 109, :column 6, :end-line 109, :end-column 13}}, on-changes {:name re-frame.core/on-changes, :file "resources/public/js/re_frame/core.cljc", :line 43, :column 1, :end-line 43, :end-column 16, :meta {:file "/Users/dilvan/OneDrive/IdeaProjects/dicom-roi-editor/resources/public/js/re_frame/core.cljc", :line 43, :column 6, :end-line 43, :end-column 16}}, enrich {:name re-frame.core/enrich, :file "resources/public/js/re_frame/core.cljc", :line 40, :column 1, :end-line 40, :end-column 12, :meta {:file "/Users/dilvan/OneDrive/IdeaProjects/dicom-roi-editor/resources/public/js/re_frame/core.cljc", :line 40, :column 6, :end-line 40, :end-column 12}}, reg-sub-raw {:name re-frame.core/reg-sub-raw, :file "resources/public/js/re_frame/core.cljc", :line 47, :column 1, :end-line 47, :end-column 17, :meta {:file "/Users/dilvan/OneDrive/IdeaProjects/dicom-roi-editor/resources/public/js/re_frame/core.cljc", :line 47, :column 6, :end-line 47, :end-column 17}}, subscribe {:name re-frame.core/subscribe, :file "resources/public/js/re_frame/core.cljc", :line 49, :column 1, :end-line 49, :end-column 15, :meta {:file "/Users/dilvan/OneDrive/IdeaProjects/dicom-roi-editor/resources/public/js/re_frame/core.cljc", :line 49, :column 6, :end-line 49, :end-column 15}}, assoc-coeffect {:name re-frame.core/assoc-coeffect, :file "resources/public/js/re_frame/core.cljc", :line 34, :column 1, :end-line 34, :end-column 20, :meta {:file "/Users/dilvan/OneDrive/IdeaProjects/dicom-roi-editor/resources/public/js/re_frame/core.cljc", :line 34, :column 6, :end-line 34, :end-column 20}}, register-sub {:protocol-inline nil, :meta {:file "/Users/dilvan/OneDrive/IdeaProjects/dicom-roi-editor/resources/public/js/re_frame/core.cljc", :line 175, :column 7, :end-line 175, :end-column 19, :arglists (quote ([& args])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name re-frame.core/register-sub, :variadic true, :file "resources/public/js/re_frame/core.cljc", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 175, :end-line 175, :max-fixed-arity 0, :fn-var true, :arglists ([& args])}, remove-post-event-callback {:protocol-inline nil, :meta {:file "/Users/dilvan/OneDrive/IdeaProjects/dicom-roi-editor/resources/public/js/re_frame/core.cljc", :line 163, :column 7, :end-line 163, :end-column 33, :arglists (quote ([id]))}, :name re-frame.core/remove-post-event-callback, :variadic false, :file "resources/public/js/re_frame/core.cljc", :end-column 33, :method-params ([id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 163, :end-line 163, :max-fixed-arity 1, :fn-var true, :arglists (quote ([id]))}, path {:name re-frame.core/path, :file "resources/public/js/re_frame/core.cljc", :line 39, :column 1, :end-line 39, :end-column 10, :meta {:file "/Users/dilvan/OneDrive/IdeaProjects/dicom-roi-editor/resources/public/js/re_frame/core.cljc", :line 39, :column 6, :end-line 39, :end-column 10}}, reg-sub {:name re-frame.core/reg-sub, :file "resources/public/js/re_frame/core.cljc", :line 48, :column 1, :end-line 48, :end-column 13, :meta {:file "/Users/dilvan/OneDrive/IdeaProjects/dicom-roi-editor/resources/public/js/re_frame/core.cljc", :line 48, :column 6, :end-line 48, :end-column 13}}, make-restore-fn {:protocol-inline nil, :meta {:file "/Users/dilvan/OneDrive/IdeaProjects/dicom-roi-editor/resources/public/js/re_frame/core.cljc", :line 114, :column 7, :end-line 114, :end-column 22, :arglists (quote ([])), :doc "Checkpoints the state of re-frame and returns a function which, when\n  later called, will restore re-frame to that checkpointed state.\n\n  Checkpoint includes app-db, all registered handlers and all subscriptions.\n  "}, :name re-frame.core/make-restore-fn, :variadic false, :file "resources/public/js/re_frame/core.cljc", :end-column 22, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 114, :end-line 114, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Checkpoints the state of re-frame and returns a function which, when\n  later called, will restore re-frame to that checkpointed state.\n\n  Checkpoint includes app-db, all registered handlers and all subscriptions.\n  "}, clear-fx {:name re-frame.core/clear-fx, :file "resources/public/js/re_frame/core.cljc", :line 55, :column 1, :end-line 55, :end-column 14, :meta {:file "/Users/dilvan/OneDrive/IdeaProjects/dicom-roi-editor/resources/public/js/re_frame/core.cljc", :line 55, :column 6, :end-line 55, :end-column 14}}, get-effect {:name re-frame.core/get-effect, :file "resources/public/js/re_frame/core.cljc", :line 32, :column 1, :end-line 32, :end-column 16, :meta {:file "/Users/dilvan/OneDrive/IdeaProjects/dicom-roi-editor/resources/public/js/re_frame/core.cljc", :line 32, :column 6, :end-line 32, :end-column 16}}, reg-event-db {:protocol-inline nil, :meta {:file "/Users/dilvan/OneDrive/IdeaProjects/dicom-roi-editor/resources/public/js/re_frame/core.cljc", :line 66, :column 7, :end-line 66, :end-column 19, :arglists (quote ([id db-handler] [id interceptors db-handler])), :doc "Register the given `id`, typically a keyword, with the combination of\n  `db-handler` and an interceptor chain.\n  `db-handler` is a function: (db event) -> db\n  `interceptors` is a collection of interceptors, possibly nested (needs flattenting).\n  `db-handler` is wrapped in an interceptor and added to the end of the chain, so in the end\n   there is only a chain.\n   The necessary effects and coeffects handler are added to the front of the\n   interceptor chain.  These interceptors ensure that app-db is available and updated.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([id db-handler] [id interceptors db-handler]), :arglists ([id db-handler] [id interceptors db-handler]), :arglists-meta (nil nil)}}, :name re-frame.core/reg-event-db, :variadic false, :file "resources/public/js/re_frame/core.cljc", :end-column 19, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([id db-handler] [id interceptors db-handler]), :arglists ([id db-handler] [id interceptors db-handler]), :arglists-meta (nil nil)}, :method-params ([id db-handler] [id interceptors db-handler]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 66, :end-line 66, :max-fixed-arity 3, :fn-var true, :arglists ([id db-handler] [id interceptors db-handler]), :doc "Register the given `id`, typically a keyword, with the combination of\n  `db-handler` and an interceptor chain.\n  `db-handler` is a function: (db event) -> db\n  `interceptors` is a collection of interceptors, possibly nested (needs flattenting).\n  `db-handler` is wrapped in an interceptor and added to the end of the chain, so in the end\n   there is only a chain.\n   The necessary effects and coeffects handler are added to the front of the\n   interceptor chain.  These interceptors ensure that app-db is available and updated."}, dispatch-sync {:name re-frame.core/dispatch-sync, :file "resources/public/js/re_frame/core.cljc", :line 20, :column 1, :end-line 20, :end-column 19, :meta {:file "/Users/dilvan/OneDrive/IdeaProjects/dicom-roi-editor/resources/public/js/re_frame/core.cljc", :line 20, :column 6, :end-line 20, :end-column 19}}, clear-event {:name re-frame.core/clear-event, :file "resources/public/js/re_frame/core.cljc", :line 64, :column 1, :end-line 64, :end-column 17, :meta {:file "/Users/dilvan/OneDrive/IdeaProjects/dicom-roi-editor/resources/public/js/re_frame/core.cljc", :line 64, :column 6, :end-line 64, :end-column 17}}, ->interceptor {:name re-frame.core/->interceptor, :file "resources/public/js/re_frame/core.cljc", :line 29, :column 1, :end-line 29, :end-column 19, :meta {:file "/Users/dilvan/OneDrive/IdeaProjects/dicom-roi-editor/resources/public/js/re_frame/core.cljc", :line 29, :column 6, :end-line 29, :end-column 19}}, set-loggers! {:name re-frame.core/set-loggers!, :file "resources/public/js/re_frame/core.cljc", :line 102, :column 1, :end-line 102, :end-column 18, :meta {:file "/Users/dilvan/OneDrive/IdeaProjects/dicom-roi-editor/resources/public/js/re_frame/core.cljc", :line 102, :column 6, :end-line 102, :end-column 18}}, inject-cofx {:name re-frame.core/inject-cofx, :file "resources/public/js/re_frame/core.cljc", :line 59, :column 1, :end-line 59, :end-column 17, :meta {:file "/Users/dilvan/OneDrive/IdeaProjects/dicom-roi-editor/resources/public/js/re_frame/core.cljc", :line 59, :column 6, :end-line 59, :end-column 17}}, get-coeffect {:name re-frame.core/get-coeffect, :file "resources/public/js/re_frame/core.cljc", :line 31, :column 1, :end-line 31, :end-column 18, :meta {:file "/Users/dilvan/OneDrive/IdeaProjects/dicom-roi-editor/resources/public/js/re_frame/core.cljc", :line 31, :column 6, :end-line 31, :end-column 18}}, debug {:name re-frame.core/debug, :file "resources/public/js/re_frame/core.cljc", :line 38, :column 1, :end-line 38, :end-column 11, :meta {:file "/Users/dilvan/OneDrive/IdeaProjects/dicom-roi-editor/resources/public/js/re_frame/core.cljc", :line 38, :column 6, :end-line 38, :end-column 11}}, assoc-effect {:name re-frame.core/assoc-effect, :file "resources/public/js/re_frame/core.cljc", :line 33, :column 1, :end-line 33, :end-column 18, :meta {:file "/Users/dilvan/OneDrive/IdeaProjects/dicom-roi-editor/resources/public/js/re_frame/core.cljc", :line 33, :column 6, :end-line 33, :end-column 18}}, enqueue {:name re-frame.core/enqueue, :file "resources/public/js/re_frame/core.cljc", :line 30, :column 1, :end-line 30, :end-column 13, :meta {:file "/Users/dilvan/OneDrive/IdeaProjects/dicom-roi-editor/resources/public/js/re_frame/core.cljc", :line 30, :column 6, :end-line 30, :end-column 13}}, clear-cofx {:name re-frame.core/clear-cofx, :file "resources/public/js/re_frame/core.cljc", :line 60, :column 1, :end-line 60, :end-column 16, :meta {:file "/Users/dilvan/OneDrive/IdeaProjects/dicom-roi-editor/resources/public/js/re_frame/core.cljc", :line 60, :column 6, :end-line 60, :end-column 16}}, reg-event-ctx {:protocol-inline nil, :meta {:file "/Users/dilvan/OneDrive/IdeaProjects/dicom-roi-editor/resources/public/js/re_frame/core.cljc", :line 88, :column 7, :end-line 88, :end-column 20, :arglists (quote ([id handler] [id interceptors handler])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([id handler] [id interceptors handler]), :arglists ([id handler] [id interceptors handler]), :arglists-meta (nil nil)}}, :name re-frame.core/reg-event-ctx, :variadic false, :file "resources/public/js/re_frame/core.cljc", :end-column 20, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([id handler] [id interceptors handler]), :arglists ([id handler] [id interceptors handler]), :arglists-meta (nil nil)}, :method-params ([id handler] [id interceptors handler]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 88, :end-line 88, :max-fixed-arity 3, :fn-var true, :arglists ([id handler] [id interceptors handler])}, reg-fx {:name re-frame.core/reg-fx, :file "resources/public/js/re_frame/core.cljc", :line 54, :column 1, :end-line 54, :end-column 12, :meta {:file "/Users/dilvan/OneDrive/IdeaProjects/dicom-roi-editor/resources/public/js/re_frame/core.cljc", :line 54, :column 6, :end-line 54, :end-column 12}}, trim-v {:name re-frame.core/trim-v, :file "resources/public/js/re_frame/core.cljc", :line 41, :column 1, :end-line 41, :end-column 12, :meta {:file "/Users/dilvan/OneDrive/IdeaProjects/dicom-roi-editor/resources/public/js/re_frame/core.cljc", :line 41, :column 6, :end-line 41, :end-column 12}}, clear-sub {:name re-frame.core/clear-sub, :file "resources/public/js/re_frame/core.cljc", :line 51, :column 1, :end-line 51, :end-column 15, :meta {:file "/Users/dilvan/OneDrive/IdeaProjects/dicom-roi-editor/resources/public/js/re_frame/core.cljc", :line 51, :column 6, :end-line 51, :end-column 15}}, dispatch {:name re-frame.core/dispatch, :file "resources/public/js/re_frame/core.cljc", :line 19, :column 1, :end-line 19, :end-column 14, :meta {:file "/Users/dilvan/OneDrive/IdeaProjects/dicom-roi-editor/resources/public/js/re_frame/core.cljc", :line 19, :column 6, :end-line 19, :end-column 14}}, after {:name re-frame.core/after, :file "resources/public/js/re_frame/core.cljc", :line 42, :column 1, :end-line 42, :end-column 11, :meta {:file "/Users/dilvan/OneDrive/IdeaProjects/dicom-roi-editor/resources/public/js/re_frame/core.cljc", :line 42, :column 6, :end-line 42, :end-column 11}}, add-post-event-callback {:protocol-inline nil, :meta {:file "/Users/dilvan/OneDrive/IdeaProjects/dicom-roi-editor/resources/public/js/re_frame/core.cljc", :line 142, :column 7, :end-line 142, :end-column 30, :arglists (quote ([f] [id f])), :doc "Registers a function `f` to be called after each event is procecessed\n   `f` will be called with two arguments:\n    - `event`: a vector. The event just processed.\n    - `queue`: a PersistentQueue, possibly empty, of events yet to be processed.\n\n   This is useful in advanced cases like:\n     - you are implementing a complex bootstrap pipeline\n     - you want to create your own handling infrastructure, with perhaps multiple\n       handlers for the one event, etc.  Hook in here.\n     - libraries providing 'isomorphic javascript' rendering on  Nodejs or Nashorn.\n\n  'id' is typically a keyword. Supplied at \"add time\" so it can subsequently\n  be used at \"remove time\" to get rid of the right callback.\n  ", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([f] [id f]), :arglists ([f] [id f]), :arglists-meta (nil nil)}}, :name re-frame.core/add-post-event-callback, :variadic false, :file "resources/public/js/re_frame/core.cljc", :end-column 30, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([f] [id f]), :arglists ([f] [id f]), :arglists-meta (nil nil)}, :method-params ([f] [id f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 142, :end-line 142, :max-fixed-arity 2, :fn-var true, :arglists ([f] [id f]), :doc "Registers a function `f` to be called after each event is procecessed\n   `f` will be called with two arguments:\n    - `event`: a vector. The event just processed.\n    - `queue`: a PersistentQueue, possibly empty, of events yet to be processed.\n\n   This is useful in advanced cases like:\n     - you are implementing a complex bootstrap pipeline\n     - you want to create your own handling infrastructure, with perhaps multiple\n       handlers for the one event, etc.  Hook in here.\n     - libraries providing 'isomorphic javascript' rendering on  Nodejs or Nashorn.\n\n  'id' is typically a keyword. Supplied at \"add time\" so it can subsequently\n  be used at \"remove time\" to get rid of the right callback.\n  "}, reg-cofx {:name re-frame.core/reg-cofx, :file "resources/public/js/re_frame/core.cljc", :line 58, :column 1, :end-line 58, :end-column 14, :meta {:file "/Users/dilvan/OneDrive/IdeaProjects/dicom-roi-editor/resources/public/js/re_frame/core.cljc", :line 58, :column 6, :end-line 58, :end-column 14}}, reg-event-fx {:protocol-inline nil, :meta {:file "/Users/dilvan/OneDrive/IdeaProjects/dicom-roi-editor/resources/public/js/re_frame/core.cljc", :line 81, :column 7, :end-line 81, :end-column 19, :arglists (quote ([id fx-handler] [id interceptors fx-handler])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([id fx-handler] [id interceptors fx-handler]), :arglists ([id fx-handler] [id interceptors fx-handler]), :arglists-meta (nil nil)}}, :name re-frame.core/reg-event-fx, :variadic false, :file "resources/public/js/re_frame/core.cljc", :end-column 19, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([id fx-handler] [id interceptors fx-handler]), :arglists ([id fx-handler] [id interceptors fx-handler]), :arglists-meta (nil nil)}, :method-params ([id fx-handler] [id interceptors fx-handler]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 81, :end-line 81, :max-fixed-arity 3, :fn-var true, :arglists ([id fx-handler] [id interceptors fx-handler])}, register-handler {:protocol-inline nil, :meta {:file "/Users/dilvan/OneDrive/IdeaProjects/dicom-roi-editor/resources/public/js/re_frame/core.cljc", :line 170, :column 7, :end-line 170, :end-column 23, :arglists (quote ([& args])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name re-frame.core/register-handler, :variadic true, :file "resources/public/js/re_frame/core.cljc", :end-column 23, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 170, :end-line 170, :max-fixed-arity 0, :fn-var true, :arglists ([& args])}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:warn}, :order [:warn]}, :doc nil}